# Generated from ./LA.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,7,333,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,281,8,0,1,1,1,1,1,
        1,5,1,286,8,1,10,1,12,1,289,9,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,
        1,3,5,3,300,8,3,10,3,12,3,303,9,3,1,3,1,3,1,4,4,4,308,8,4,11,4,12,
        4,309,1,5,4,5,313,8,5,11,5,12,5,314,1,5,1,5,4,5,319,8,5,11,5,12,
        5,320,3,5,323,8,5,1,6,1,6,5,6,327,8,6,10,6,12,6,330,9,6,1,7,1,7,
        0,0,8,1,1,3,2,5,0,7,3,9,4,11,5,13,6,15,7,1,0,9,2,0,40,41,44,44,4,
        0,42,43,45,45,47,47,101,101,2,0,91,91,93,93,2,0,37,38,94,94,2,0,
        34,34,92,92,2,0,92,92,125,125,2,0,65,90,97,122,4,0,48,57,65,90,95,
        95,97,122,3,0,9,10,13,13,32,32,389,0,1,1,0,0,0,0,3,1,0,0,0,0,7,1,
        0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,1,280,1,
        0,0,0,3,282,1,0,0,0,5,292,1,0,0,0,7,295,1,0,0,0,9,307,1,0,0,0,11,
        312,1,0,0,0,13,324,1,0,0,0,15,331,1,0,0,0,17,18,5,97,0,0,18,19,5,
        108,0,0,19,20,5,103,0,0,20,21,5,111,0,0,21,22,5,114,0,0,22,23,5,
        105,0,0,23,24,5,116,0,0,24,25,5,109,0,0,25,281,5,111,0,0,26,27,5,
        100,0,0,27,28,5,101,0,0,28,29,5,99,0,0,29,30,5,108,0,0,30,31,5,97,
        0,0,31,32,5,114,0,0,32,281,5,101,0,0,33,281,5,58,0,0,34,35,5,101,
        0,0,35,36,5,115,0,0,36,37,5,99,0,0,37,38,5,114,0,0,38,39,5,101,0,
        0,39,40,5,118,0,0,40,281,5,97,0,0,41,42,5,108,0,0,42,43,5,105,0,
        0,43,44,5,116,0,0,44,45,5,101,0,0,45,46,5,114,0,0,46,47,5,97,0,0,
        47,281,5,108,0,0,48,49,5,105,0,0,49,50,5,110,0,0,50,51,5,116,0,0,
        51,52,5,101,0,0,52,53,5,105,0,0,53,54,5,114,0,0,54,281,5,111,0,0,
        55,56,5,108,0,0,56,57,5,101,0,0,57,58,5,105,0,0,58,281,5,97,0,0,
        59,281,7,0,0,0,60,61,5,102,0,0,61,62,5,105,0,0,62,63,5,109,0,0,63,
        64,5,95,0,0,64,65,5,97,0,0,65,66,5,108,0,0,66,67,5,103,0,0,67,68,
        5,111,0,0,68,69,5,114,0,0,69,70,5,105,0,0,70,71,5,116,0,0,71,72,
        5,109,0,0,72,281,5,111,0,0,73,281,5,62,0,0,74,75,5,62,0,0,75,281,
        5,61,0,0,76,281,5,60,0,0,77,78,5,60,0,0,78,281,5,61,0,0,79,80,5,
        60,0,0,80,281,5,62,0,0,81,281,5,61,0,0,82,83,5,114,0,0,83,84,5,101,
        0,0,84,85,5,97,0,0,85,281,5,108,0,0,86,87,5,60,0,0,87,281,5,45,0,
        0,88,281,7,1,0,0,89,90,5,110,0,0,90,91,5,97,0,0,91,281,5,111,0,0,
        92,93,5,108,0,0,93,94,5,111,0,0,94,95,5,103,0,0,95,96,5,105,0,0,
        96,97,5,99,0,0,97,281,5,111,0,0,98,99,5,111,0,0,99,281,5,117,0,0,
        100,101,5,101,0,0,101,102,5,110,0,0,102,103,5,116,0,0,103,104,5,
        97,0,0,104,281,5,111,0,0,105,106,5,115,0,0,106,107,5,101,0,0,107,
        108,5,110,0,0,108,109,5,97,0,0,109,281,5,111,0,0,110,111,5,102,0,
        0,111,112,5,105,0,0,112,113,5,109,0,0,113,114,5,95,0,0,114,115,5,
        115,0,0,115,281,5,101,0,0,116,117,5,102,0,0,117,118,5,105,0,0,118,
        119,5,109,0,0,119,120,5,95,0,0,120,121,5,99,0,0,121,122,5,97,0,0,
        122,123,5,115,0,0,123,281,5,111,0,0,124,125,5,112,0,0,125,126,5,
        97,0,0,126,127,5,114,0,0,127,281,5,97,0,0,128,129,5,97,0,0,129,130,
        5,116,0,0,130,281,5,101,0,0,131,132,5,102,0,0,132,133,5,97,0,0,133,
        134,5,99,0,0,134,281,5,97,0,0,135,136,5,102,0,0,136,137,5,105,0,
        0,137,138,5,109,0,0,138,139,5,95,0,0,139,140,5,112,0,0,140,141,5,
        97,0,0,141,142,5,114,0,0,142,281,5,97,0,0,143,144,5,114,0,0,144,
        145,5,101,0,0,145,146,5,116,0,0,146,147,5,111,0,0,147,148,5,114,
        0,0,148,149,5,110,0,0,149,281,5,101,0,0,150,151,5,102,0,0,151,152,
        5,117,0,0,152,153,5,110,0,0,153,154,5,99,0,0,154,155,5,97,0,0,155,
        281,5,111,0,0,156,157,5,102,0,0,157,158,5,105,0,0,158,159,5,109,
        0,0,159,160,5,95,0,0,160,161,5,102,0,0,161,162,5,117,0,0,162,163,
        5,110,0,0,163,164,5,99,0,0,164,165,5,97,0,0,165,281,5,111,0,0,166,
        281,7,2,0,0,167,168,5,112,0,0,168,169,5,114,0,0,169,170,5,111,0,
        0,170,171,5,99,0,0,171,172,5,101,0,0,172,173,5,100,0,0,173,174,5,
        105,0,0,174,175,5,109,0,0,175,176,5,101,0,0,176,177,5,110,0,0,177,
        178,5,116,0,0,178,281,5,111,0,0,179,180,5,118,0,0,180,181,5,97,0,
        0,181,281,5,114,0,0,182,183,5,102,0,0,183,184,5,105,0,0,184,185,
        5,109,0,0,185,186,5,95,0,0,186,187,5,112,0,0,187,188,5,114,0,0,188,
        189,5,111,0,0,189,190,5,99,0,0,190,191,5,101,0,0,191,192,5,100,0,
        0,192,193,5,105,0,0,193,194,5,109,0,0,194,195,5,101,0,0,195,196,
        5,110,0,0,196,197,5,116,0,0,197,281,5,111,0,0,198,199,5,118,0,0,
        199,200,5,101,0,0,200,201,5,114,0,0,201,202,5,100,0,0,202,203,5,
        97,0,0,203,204,5,100,0,0,204,205,5,101,0,0,205,206,5,105,0,0,206,
        207,5,114,0,0,207,281,5,111,0,0,208,209,5,115,0,0,209,281,5,101,
        0,0,210,211,5,46,0,0,211,281,5,46,0,0,212,213,5,99,0,0,213,214,5,
        97,0,0,214,215,5,115,0,0,215,281,5,111,0,0,216,217,5,115,0,0,217,
        218,5,101,0,0,218,219,5,106,0,0,219,281,5,97,0,0,220,221,5,101,0,
        0,221,222,5,110,0,0,222,223,5,113,0,0,223,224,5,117,0,0,224,225,
        5,97,0,0,225,226,5,110,0,0,226,227,5,116,0,0,227,281,5,111,0,0,228,
        229,5,102,0,0,229,230,5,105,0,0,230,231,5,109,0,0,231,232,5,95,0,
        0,232,233,5,101,0,0,233,234,5,110,0,0,234,235,5,113,0,0,235,236,
        5,117,0,0,236,237,5,97,0,0,237,238,5,110,0,0,238,239,5,116,0,0,239,
        281,5,111,0,0,240,281,7,3,0,0,241,242,5,114,0,0,242,243,5,101,0,
        0,243,244,5,103,0,0,244,245,5,105,0,0,245,246,5,115,0,0,246,247,
        5,116,0,0,247,248,5,114,0,0,248,281,5,111,0,0,249,250,5,102,0,0,
        250,251,5,105,0,0,251,252,5,109,0,0,252,253,5,95,0,0,253,254,5,114,
        0,0,254,255,5,101,0,0,255,256,5,103,0,0,256,257,5,105,0,0,257,258,
        5,115,0,0,258,259,5,116,0,0,259,260,5,114,0,0,260,281,5,111,0,0,
        261,281,5,46,0,0,262,263,5,116,0,0,263,264,5,105,0,0,264,265,5,112,
        0,0,265,281,5,111,0,0,266,267,5,99,0,0,267,268,5,111,0,0,268,269,
        5,110,0,0,269,270,5,115,0,0,270,271,5,116,0,0,271,272,5,97,0,0,272,
        273,5,110,0,0,273,274,5,116,0,0,274,281,5,101,0,0,275,276,5,102,
        0,0,276,277,5,97,0,0,277,278,5,108,0,0,278,279,5,115,0,0,279,281,
        5,111,0,0,280,17,1,0,0,0,280,26,1,0,0,0,280,33,1,0,0,0,280,34,1,
        0,0,0,280,41,1,0,0,0,280,48,1,0,0,0,280,55,1,0,0,0,280,59,1,0,0,
        0,280,60,1,0,0,0,280,73,1,0,0,0,280,74,1,0,0,0,280,76,1,0,0,0,280,
        77,1,0,0,0,280,79,1,0,0,0,280,81,1,0,0,0,280,82,1,0,0,0,280,86,1,
        0,0,0,280,88,1,0,0,0,280,89,1,0,0,0,280,92,1,0,0,0,280,98,1,0,0,
        0,280,100,1,0,0,0,280,105,1,0,0,0,280,110,1,0,0,0,280,116,1,0,0,
        0,280,124,1,0,0,0,280,128,1,0,0,0,280,131,1,0,0,0,280,135,1,0,0,
        0,280,143,1,0,0,0,280,150,1,0,0,0,280,156,1,0,0,0,280,166,1,0,0,
        0,280,167,1,0,0,0,280,179,1,0,0,0,280,182,1,0,0,0,280,198,1,0,0,
        0,280,208,1,0,0,0,280,210,1,0,0,0,280,212,1,0,0,0,280,216,1,0,0,
        0,280,220,1,0,0,0,280,228,1,0,0,0,280,240,1,0,0,0,280,241,1,0,0,
        0,280,249,1,0,0,0,280,261,1,0,0,0,280,262,1,0,0,0,280,266,1,0,0,
        0,280,275,1,0,0,0,281,2,1,0,0,0,282,287,5,34,0,0,283,286,3,5,2,0,
        284,286,8,4,0,0,285,283,1,0,0,0,285,284,1,0,0,0,286,289,1,0,0,0,
        287,285,1,0,0,0,287,288,1,0,0,0,288,290,1,0,0,0,289,287,1,0,0,0,
        290,291,5,34,0,0,291,4,1,0,0,0,292,293,5,92,0,0,293,294,5,34,0,0,
        294,6,1,0,0,0,295,301,5,123,0,0,296,297,5,92,0,0,297,300,5,125,0,
        0,298,300,8,5,0,0,299,296,1,0,0,0,299,298,1,0,0,0,300,303,1,0,0,
        0,301,299,1,0,0,0,301,302,1,0,0,0,302,304,1,0,0,0,303,301,1,0,0,
        0,304,305,5,125,0,0,305,8,1,0,0,0,306,308,2,48,57,0,307,306,1,0,
        0,0,308,309,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,10,1,0,0,
        0,311,313,2,48,57,0,312,311,1,0,0,0,313,314,1,0,0,0,314,312,1,0,
        0,0,314,315,1,0,0,0,315,322,1,0,0,0,316,318,5,46,0,0,317,319,2,48,
        57,0,318,317,1,0,0,0,319,320,1,0,0,0,320,318,1,0,0,0,320,321,1,0,
        0,0,321,323,1,0,0,0,322,316,1,0,0,0,322,323,1,0,0,0,323,12,1,0,0,
        0,324,328,7,6,0,0,325,327,7,7,0,0,326,325,1,0,0,0,327,330,1,0,0,
        0,328,326,1,0,0,0,328,329,1,0,0,0,329,14,1,0,0,0,330,328,1,0,0,0,
        331,332,7,8,0,0,332,16,1,0,0,0,12,0,280,285,287,299,301,309,314,
        320,322,326,328,0
    ]

class LA(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    SELF = 1
    CADEIA = 2
    COMENTARIO = 3
    NUM_INT = 4
    NUM_REAL = 5
    IDENT = 6
    WS = 7

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "SELF", "CADEIA", "COMENTARIO", "NUM_INT", "NUM_REAL", "IDENT", 
            "WS" ]

    ruleNames = [ "SELF", "CADEIA", "ESC_SEQ", "COMENTARIO", "NUM_INT", 
                  "NUM_REAL", "IDENT", "WS" ]

    grammarFileName = "LA.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


