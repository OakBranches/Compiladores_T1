# Generated from ./LA.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,7,119,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,74,8,0,1,1,1,1,
        1,1,5,1,79,8,1,10,1,12,1,82,9,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,
        1,3,5,3,93,8,3,10,3,12,3,96,9,3,1,3,1,3,1,4,4,4,101,8,4,11,4,12,
        4,102,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,116,8,6,1,
        7,1,7,0,0,8,1,1,3,2,5,0,7,3,9,4,11,5,13,6,15,7,1,0,6,2,0,40,41,44,
        44,2,0,34,34,92,92,2,0,92,92,125,125,1,0,97,122,3,0,9,10,13,13,32,
        32,3,0,42,43,45,45,47,47,135,0,1,1,0,0,0,0,3,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,1,73,1,0,0,0,
        3,75,1,0,0,0,5,85,1,0,0,0,7,88,1,0,0,0,9,100,1,0,0,0,11,104,1,0,
        0,0,13,115,1,0,0,0,15,117,1,0,0,0,17,18,5,97,0,0,18,19,5,108,0,0,
        19,20,5,103,0,0,20,21,5,111,0,0,21,22,5,114,0,0,22,23,5,105,0,0,
        23,24,5,116,0,0,24,25,5,109,0,0,25,74,5,111,0,0,26,27,5,100,0,0,
        27,28,5,101,0,0,28,29,5,99,0,0,29,30,5,108,0,0,30,31,5,97,0,0,31,
        32,5,114,0,0,32,74,5,101,0,0,33,74,5,58,0,0,34,35,5,101,0,0,35,36,
        5,115,0,0,36,37,5,99,0,0,37,38,5,114,0,0,38,39,5,101,0,0,39,40,5,
        118,0,0,40,74,5,97,0,0,41,42,5,108,0,0,42,43,5,105,0,0,43,44,5,116,
        0,0,44,45,5,101,0,0,45,46,5,114,0,0,46,47,5,97,0,0,47,74,5,108,0,
        0,48,49,5,105,0,0,49,50,5,110,0,0,50,51,5,116,0,0,51,52,5,101,0,
        0,52,53,5,105,0,0,53,54,5,114,0,0,54,74,5,111,0,0,55,56,5,108,0,
        0,56,57,5,101,0,0,57,58,5,105,0,0,58,74,5,97,0,0,59,74,7,0,0,0,60,
        61,5,102,0,0,61,62,5,105,0,0,62,63,5,109,0,0,63,64,5,95,0,0,64,65,
        5,97,0,0,65,66,5,108,0,0,66,67,5,103,0,0,67,68,5,111,0,0,68,69,5,
        114,0,0,69,70,5,105,0,0,70,71,5,116,0,0,71,72,5,109,0,0,72,74,5,
        111,0,0,73,17,1,0,0,0,73,26,1,0,0,0,73,33,1,0,0,0,73,34,1,0,0,0,
        73,41,1,0,0,0,73,48,1,0,0,0,73,55,1,0,0,0,73,59,1,0,0,0,73,60,1,
        0,0,0,74,2,1,0,0,0,75,80,5,34,0,0,76,79,3,5,2,0,77,79,8,1,0,0,78,
        76,1,0,0,0,78,77,1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,
        0,81,83,1,0,0,0,82,80,1,0,0,0,83,84,5,34,0,0,84,4,1,0,0,0,85,86,
        5,92,0,0,86,87,5,34,0,0,87,6,1,0,0,0,88,94,5,123,0,0,89,90,5,92,
        0,0,90,93,5,125,0,0,91,93,8,2,0,0,92,89,1,0,0,0,92,91,1,0,0,0,93,
        96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,97,1,0,0,0,96,94,1,0,0,
        0,97,98,5,125,0,0,98,8,1,0,0,0,99,101,7,3,0,0,100,99,1,0,0,0,101,
        102,1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,10,1,0,0,0,104,105,
        7,4,0,0,105,12,1,0,0,0,106,116,5,62,0,0,107,108,5,62,0,0,108,116,
        5,61,0,0,109,116,5,60,0,0,110,111,5,60,0,0,111,116,5,61,0,0,112,
        113,5,60,0,0,113,116,5,62,0,0,114,116,5,61,0,0,115,106,1,0,0,0,115,
        107,1,0,0,0,115,109,1,0,0,0,115,110,1,0,0,0,115,112,1,0,0,0,115,
        114,1,0,0,0,116,14,1,0,0,0,117,118,7,5,0,0,118,16,1,0,0,0,8,0,73,
        78,80,92,94,102,115,0
    ]

class LA(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    SELF = 1
    CADEIA = 2
    COMENTARIO = 3
    IDENT = 4
    WS = 5
    OP_REL = 6
    OP_ARIT = 7

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "SELF", "CADEIA", "COMENTARIO", "IDENT", "WS", "OP_REL", "OP_ARIT" ]

    ruleNames = [ "SELF", "CADEIA", "ESC_SEQ", "COMENTARIO", "IDENT", "WS", 
                  "OP_REL", "OP_ARIT" ]

    grammarFileName = "LA.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


