# Generated from ./LA.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,12,182,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,102,8,0,1,1,3,1,105,8,
        1,1,1,4,1,108,8,1,11,1,12,1,109,1,2,3,2,113,8,2,1,2,4,2,116,8,2,
        11,2,12,2,117,1,2,1,2,4,2,122,8,2,11,2,12,2,123,3,2,126,8,2,1,3,
        1,3,5,3,130,8,3,10,3,12,3,133,9,3,1,4,1,4,1,4,5,4,138,8,4,10,4,12,
        4,141,9,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,5,6,150,8,6,10,6,12,6,153,
        9,6,1,6,3,6,156,8,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,3,8,173,8,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
        0,0,13,1,1,3,2,5,3,7,4,9,5,11,0,13,6,15,7,17,8,19,9,21,10,23,11,
        25,12,1,0,7,2,0,43,43,45,45,2,0,65,90,97,122,3,0,48,57,65,90,97,
        122,2,0,39,39,92,92,2,0,10,10,13,13,3,0,9,10,13,13,32,32,3,0,42,
        43,45,45,47,47,210,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,1,101,1,0,0,0,3,104,1,0,
        0,0,5,112,1,0,0,0,7,127,1,0,0,0,9,134,1,0,0,0,11,144,1,0,0,0,13,
        147,1,0,0,0,15,160,1,0,0,0,17,172,1,0,0,0,19,174,1,0,0,0,21,176,
        1,0,0,0,23,178,1,0,0,0,25,180,1,0,0,0,27,28,5,68,0,0,28,29,5,69,
        0,0,29,30,5,67,0,0,30,31,5,76,0,0,31,32,5,65,0,0,32,33,5,82,0,0,
        33,34,5,65,0,0,34,35,5,67,0,0,35,36,5,79,0,0,36,37,5,69,0,0,37,102,
        5,83,0,0,38,39,5,65,0,0,39,40,5,76,0,0,40,41,5,71,0,0,41,42,5,79,
        0,0,42,43,5,82,0,0,43,44,5,73,0,0,44,45,5,84,0,0,45,46,5,77,0,0,
        46,102,5,79,0,0,47,48,5,73,0,0,48,49,5,78,0,0,49,102,5,84,0,0,50,
        51,5,82,0,0,51,52,5,69,0,0,52,53,5,65,0,0,53,102,5,76,0,0,54,55,
        5,65,0,0,55,56,5,84,0,0,56,57,5,82,0,0,57,58,5,73,0,0,58,59,5,66,
        0,0,59,60,5,85,0,0,60,61,5,73,0,0,61,102,5,82,0,0,62,102,5,65,0,
        0,63,64,5,76,0,0,64,65,5,69,0,0,65,102,5,82,0,0,66,67,5,73,0,0,67,
        68,5,77,0,0,68,69,5,80,0,0,69,70,5,82,0,0,70,71,5,73,0,0,71,72,5,
        77,0,0,72,73,5,73,0,0,73,102,5,82,0,0,74,75,5,83,0,0,75,102,5,69,
        0,0,76,77,5,69,0,0,77,78,5,78,0,0,78,79,5,84,0,0,79,80,5,65,0,0,
        80,102,5,79,0,0,81,82,5,69,0,0,82,83,5,78,0,0,83,84,5,81,0,0,84,
        85,5,85,0,0,85,86,5,65,0,0,86,87,5,78,0,0,87,88,5,84,0,0,88,102,
        5,79,0,0,89,90,5,73,0,0,90,91,5,78,0,0,91,92,5,73,0,0,92,93,5,67,
        0,0,93,94,5,73,0,0,94,102,5,79,0,0,95,96,5,70,0,0,96,97,5,73,0,0,
        97,102,5,77,0,0,98,102,5,69,0,0,99,100,5,79,0,0,100,102,5,85,0,0,
        101,27,1,0,0,0,101,38,1,0,0,0,101,47,1,0,0,0,101,50,1,0,0,0,101,
        54,1,0,0,0,101,62,1,0,0,0,101,63,1,0,0,0,101,66,1,0,0,0,101,74,1,
        0,0,0,101,76,1,0,0,0,101,81,1,0,0,0,101,89,1,0,0,0,101,95,1,0,0,
        0,101,98,1,0,0,0,101,99,1,0,0,0,102,2,1,0,0,0,103,105,7,0,0,0,104,
        103,1,0,0,0,104,105,1,0,0,0,105,107,1,0,0,0,106,108,2,48,57,0,107,
        106,1,0,0,0,108,109,1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,
        4,1,0,0,0,111,113,7,0,0,0,112,111,1,0,0,0,112,113,1,0,0,0,113,115,
        1,0,0,0,114,116,2,48,57,0,115,114,1,0,0,0,116,117,1,0,0,0,117,115,
        1,0,0,0,117,118,1,0,0,0,118,125,1,0,0,0,119,121,5,46,0,0,120,122,
        2,48,57,0,121,120,1,0,0,0,122,123,1,0,0,0,123,121,1,0,0,0,123,124,
        1,0,0,0,124,126,1,0,0,0,125,119,1,0,0,0,125,126,1,0,0,0,126,6,1,
        0,0,0,127,131,7,1,0,0,128,130,7,2,0,0,129,128,1,0,0,0,130,133,1,
        0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,8,1,0,0,0,133,131,1,0,
        0,0,134,139,5,39,0,0,135,138,3,11,5,0,136,138,8,3,0,0,137,135,1,
        0,0,0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,
        0,0,0,140,142,1,0,0,0,141,139,1,0,0,0,142,143,5,39,0,0,143,10,1,
        0,0,0,144,145,5,92,0,0,145,146,5,39,0,0,146,12,1,0,0,0,147,151,5,
        37,0,0,148,150,8,4,0,0,149,148,1,0,0,0,150,153,1,0,0,0,151,149,1,
        0,0,0,151,152,1,0,0,0,152,155,1,0,0,0,153,151,1,0,0,0,154,156,5,
        13,0,0,155,154,1,0,0,0,155,156,1,0,0,0,156,157,1,0,0,0,157,158,5,
        10,0,0,158,159,6,6,0,0,159,14,1,0,0,0,160,161,7,5,0,0,161,162,6,
        7,1,0,162,16,1,0,0,0,163,173,5,62,0,0,164,165,5,62,0,0,165,173,5,
        61,0,0,166,173,5,60,0,0,167,168,5,60,0,0,168,173,5,61,0,0,169,170,
        5,60,0,0,170,173,5,62,0,0,171,173,5,61,0,0,172,163,1,0,0,0,172,164,
        1,0,0,0,172,166,1,0,0,0,172,167,1,0,0,0,172,169,1,0,0,0,172,171,
        1,0,0,0,173,18,1,0,0,0,174,175,7,6,0,0,175,20,1,0,0,0,176,177,5,
        58,0,0,177,22,1,0,0,0,178,179,5,40,0,0,179,24,1,0,0,0,180,181,5,
        41,0,0,181,26,1,0,0,0,14,0,101,104,109,112,117,123,125,131,137,139,
        151,155,172,2,1,6,0,1,7,1
    ]

class LA(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PALAVRA_CHAVE = 1
    NUMINT = 2
    NUMREAL = 3
    VARIAVEL = 4
    CADEIA = 5
    COMENTARIO = 6
    WS = 7
    OP_REL = 8
    OP_ARIT = 9
    DELIM = 10
    ABREPAR = 11
    FECHAPAR = 12

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "PALAVRA_CHAVE", "NUMINT", "NUMREAL", "VARIAVEL", "CADEIA", 
            "COMENTARIO", "WS", "OP_REL", "OP_ARIT", "DELIM", "ABREPAR", 
            "FECHAPAR" ]

    ruleNames = [ "PALAVRA_CHAVE", "NUMINT", "NUMREAL", "VARIAVEL", "CADEIA", 
                  "ESC_SEQ", "COMENTARIO", "WS", "OP_REL", "OP_ARIT", "DELIM", 
                  "ABREPAR", "FECHAPAR" ]

    grammarFileName = "LA.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[6] = self.COMENTARIO_action 
            actions[7] = self.WS_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def COMENTARIO_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            skip();
     

    def WS_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            skip();
     


def skip():
    pass